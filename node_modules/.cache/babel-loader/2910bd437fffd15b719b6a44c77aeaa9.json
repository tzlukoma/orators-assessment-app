{"ast":null,"code":"import _defineProperty from \"/Users/Thomas/DEV/source_code/orators-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const createOrator = orator => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    // make async call to database\n    const firestore = getFirestore();\n    firestore.collection('orators').add(_objectSpread({}, orator, {\n      chapter_id: 3,\n      family_id: 3,\n      createdAt: new Date()\n    })).then(() => {\n      dispatch({\n        type: 'CREATE_ORATOR',\n        orator\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CREATE_ORATOR_ERROR',\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Thomas/DEV/source_code/orators-app/src/store/actions/oratorActions.js"],"names":["createOrator","orator","dispatch","getState","getFirebase","getFirestore","firestore","collection","add","chapter_id","family_id","createdAt","Date","then","type","catch","err"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAIC,MAAD,IAAY;AACpC,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAArB,KAAuD;AAC1D;AACA,UAAMC,SAAS,GAAGD,YAAY,EAA9B;AACAC,IAAAA,SAAS,CAACC,UAAV,CAAqB,SAArB,EAAgCC,GAAhC,mBACOP,MADP;AAEIQ,MAAAA,UAAU,EAAE,CAFhB;AAGIC,MAAAA,SAAS,EAAE,CAHf;AAIIC,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAJf,QAKGC,IALH,CAKQ,MAAK;AACTX,MAAAA,QAAQ,CAAC;AAACY,QAAAA,IAAI,EAAE,eAAP;AAAwBb,QAAAA;AAAxB,OAAD,CAAR;AACH,KAPD,EAOGc,KAPH,CAOUC,GAAD,IAAQ;AACbd,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAE,qBAAR;AAA+BE,QAAAA;AAA/B,OAAD,CAAR;AACH,KATD;AAWH,GAdD;AAeH,CAhBM","sourcesContent":["export const createOrator = (orator) => {\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\n        // make async call to database\n        const firestore = getFirestore();\n        firestore.collection('orators').add({\n            ...orator, \n            chapter_id: 3,\n            family_id: 3,\n            createdAt: new Date()\n        }).then(()=> {\n            dispatch({type: 'CREATE_ORATOR', orator})\n        }).catch((err)=> {\n            dispatch({ type: 'CREATE_ORATOR_ERROR', err})\n        })\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}