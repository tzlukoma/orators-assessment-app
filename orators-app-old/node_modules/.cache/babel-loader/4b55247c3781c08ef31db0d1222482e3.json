{"ast":null,"code":"var _jsxFileName = \"/Users/Thomas/DEV/source_code/orators-app/orators-app-old/src/ui/forms/FormFields.js\";\nimport React from 'react';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\n\nconst FormFields = props => {\n  const renderFields = () => {\n    const formArray = [];\n\n    for (let elementName in props.formData) {\n      formArray.push({\n        id: elementName,\n        settings: props.formData[elementName]\n      });\n    }\n\n    return formArray.map((item, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        className: \"form_element\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, renderTemplates(item));\n    });\n  };\n\n  const showLabel = (show, label) => {\n    return show ? React.createElement(FormLabel, {\n      style: {\n        fontSize: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, label) : null;\n  };\n\n  const renderTemplates = data => {\n    let formTemplate = null;\n    let values = data.settings;\n\n    const changeHandler = (event, id) => {\n      const newState = props.formData;\n      newState[id].value = event.target.value;\n      props.change(newState);\n    };\n\n    switch (values.element) {\n      case 'input':\n        formTemplate = React.createElement(FormGroup, {\n          style: {\n            marginTop: 20\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(TextField, Object.assign({\n          variant: \"outlined\",\n          margin: \"dense\"\n        }, values.config, {\n          value: values.value,\n          onChange: event => changeHandler(event, data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        })));\n        break;\n\n      case 'textarea':\n        formTemplate = React.createElement(FormGroup, {\n          style: {\n            marginTop: 20\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(TextField, Object.assign({\n          variant: \"outlined\",\n          margin: \"dense\",\n          type: \"textarea\"\n        }, values.config, {\n          value: values.value,\n          onChange: event => changeHandler(event, data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        })));\n        break;\n\n      case 'radio':\n        formTemplate = React.createElement(FormGroup, {\n          style: {\n            marginTop: 20\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(FormControl, {\n          component: \"fieldset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(RadioGroup, {\n          \"aria-label\": values.labelText,\n          name: values.config.name,\n          value: values.value,\n          onChange: event => changeHandler(event, data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, values.config.options.map((item, i) => React.createElement(FormControlLabel, {\n          style: {\n            padding: 5,\n            borderTop: 'solid black 1px'\n          },\n          key: i,\n          value: item.val,\n          control: React.createElement(Radio, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          }),\n          label: item.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        })))));\n        break;\n\n      default:\n        formTemplate = null;\n    }\n\n    return formTemplate;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, renderFields());\n};\n\nexport default FormFields;","map":{"version":3,"sources":["/Users/Thomas/DEV/source_code/orators-app/orators-app-old/src/ui/forms/FormFields.js"],"names":["React","FormLabel","FormGroup","RadioGroup","Radio","FormControlLabel","FormControl","TextField","FormFields","props","renderFields","formArray","elementName","formData","push","id","settings","map","item","i","renderTemplates","showLabel","show","label","fontSize","data","formTemplate","values","changeHandler","event","newState","value","target","change","element","marginTop","labelText","config","name","options","padding","borderTop","val","text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport FormLabel from '@material-ui/core/FormLabel'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Radio from '@material-ui/core/Radio'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport TextField from '@material-ui/core/TextField'\n\nconst FormFields = (props) => {\n    \n    const renderFields = () => {\n        const formArray = [];\n\n        for(let elementName in props.formData){\n            formArray.push({\n                id: elementName,\n                settings: props.formData[elementName]\n            })\n        }\n\n        return formArray.map((item,i)=>{\n            return (\n                <div key={i} className=\"form_element\">\n                    {renderTemplates(item)}\n                </div>\n            )\n        })\n    }\n\n    const showLabel = (show,label) => {\n        return show ? \n            <FormLabel style={{fontSize:20}}>{label}</FormLabel>\n        : null\n    }\n    const renderTemplates = (data) => {\n        let formTemplate = null;\n        let values = data.settings;\n    \n    const changeHandler = (event,id) => {\n        const newState = props.formData;\n\n        newState[id].value = event.target.value;\n\n        props.change(newState)\n    }\n        switch(values.element){\n            case('input'):\n                formTemplate = \n                (<FormGroup style={{marginTop:20}}>\n                    { showLabel(values.label, values.labelText) }\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        {...values.config}\n                        value={values.value}\n                        onChange={\n                            (event) => changeHandler(event, data.id)\n                        }\n                    />\n                </FormGroup>)\n                break;\n            case('textarea'):\n                formTemplate = \n                (\n                    <FormGroup style={{marginTop:20}}>\n                    { showLabel(values.label, values.labelText) }\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"dense\"\n                            type='textarea'\n                            {...values.config}\n                            value={values.value}\n                            onChange={\n                                (event) => changeHandler(event, data.id)\n                            }\n                        />\n                    </FormGroup>\n                )\n                break;\n            case('radio'):\n                formTemplate = \n                (\n                    <FormGroup style={{marginTop:20}}>\n                        { showLabel(values.label, values.labelText) }\n                        <FormControl component=\"fieldset\" >\n                                <RadioGroup\n                                aria-label={values.labelText}\n                                name={values.config.name}\n                                value={values.value}\n                                onChange={\n                                    (event) => changeHandler(event, data.id)\n                                }\n                                >\n                                    {values.config.options.map((item,i)=>(\n                                        <FormControlLabel style={{padding:5, borderTop:'solid black 1px'}} key={i} value={item.val} control={<Radio />} label={item.text} />\n                                    ))}\n                                </RadioGroup>\n                        </FormControl>\n                    </FormGroup>\n                )\n                break;  \n            default:\n                formTemplate = null;\n\n        }\n        return formTemplate\n    }\n\n    return (\n        <div>\n            {renderFields()}\n        </div>\n    );\n};\n\nexport default FormFields;"]},"metadata":{},"sourceType":"module"}